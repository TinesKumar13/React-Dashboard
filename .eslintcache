[{"/home/tinesh_ash/Documents/SIDP/covinfo/src/index.js":"1","/home/tinesh_ash/Documents/SIDP/covinfo/src/App.js":"2","/home/tinesh_ash/Documents/SIDP/covinfo/src/firebase.config.js":"3","/home/tinesh_ash/Documents/SIDP/covinfo/src/components/Card.js":"4","/home/tinesh_ash/Documents/SIDP/covinfo/src/components/ProgressProvider.js":"5","/home/tinesh_ash/Documents/SIDP/covinfo/src/components/States.js":"6","/home/tinesh_ash/Documents/SIDP/covinfo/src/components/updateStates.js":"7","/home/tinesh_ash/Documents/SIDP/covinfo/src/components/pieChart.js":"8","/home/tinesh_ash/Documents/SIDP/covinfo/src/components/Legend.js":"9","/home/tinesh_ash/Documents/SIDP/covinfo/src/components/Alltime.js":"10","/home/tinesh_ash/Documents/SIDP/covinfo/src/components/funnelChart.js":"11","/home/tinesh_ash/Documents/SIDP/covinfo/src/components/Login.js":"12","/home/tinesh_ash/Documents/SIDP/covinfo/src/components/Shops.js":"13","/home/tinesh_ash/Documents/SIDP/covinfo/src/components/UserTracker.js":"14","/home/tinesh_ash/Documents/SIDP/covinfo/src/components/Map.js":"15","/home/tinesh_ash/Documents/SIDP/covinfo/src/components/Shoppping.js":"16","/home/tinesh_ash/Documents/SIDP/covinfo/src/components/Restaurant.js":"17","/home/tinesh_ash/Documents/SIDP/covinfo/src/components/Stats.js":"18","/home/tinesh_ash/Documents/SIDP/covinfo/src/components/Code.js":"19","/home/tinesh_ash/Documents/SIDP/covinfo/src/components/Toggle.js":"20"},{"size":942,"mtime":1614697606338,"results":"21","hashOfConfig":"22"},{"size":2751,"mtime":1614003596789,"results":"23","hashOfConfig":"22"},{"size":531,"mtime":1610780482741,"results":"24","hashOfConfig":"22"},{"size":2715,"mtime":1614000801207,"results":"25","hashOfConfig":"22"},{"size":434,"mtime":1610643955444,"results":"26","hashOfConfig":"22"},{"size":2608,"mtime":1614004876255,"results":"27","hashOfConfig":"22"},{"size":13716,"mtime":1611393943554,"results":"28","hashOfConfig":"22"},{"size":2219,"mtime":1614001266907,"results":"29","hashOfConfig":"22"},{"size":1014,"mtime":1611324415846,"results":"30","hashOfConfig":"22"},{"size":2101,"mtime":1614004877815,"results":"31","hashOfConfig":"22"},{"size":2594,"mtime":1614001548762,"results":"32","hashOfConfig":"22"},{"size":8108,"mtime":1614697548322,"results":"33","hashOfConfig":"22"},{"size":5459,"mtime":1615304443711,"results":"34","hashOfConfig":"22"},{"size":11119,"mtime":1615400349483,"results":"35","hashOfConfig":"22"},{"size":3078,"mtime":1615307654445,"results":"36","hashOfConfig":"22"},{"size":7732,"mtime":1615304440539,"results":"37","hashOfConfig":"22"},{"size":6728,"mtime":1615209393248,"results":"38","hashOfConfig":"22"},{"size":2235,"mtime":1614000082194,"results":"39","hashOfConfig":"22"},{"size":3601,"mtime":1614873795293,"results":"40","hashOfConfig":"22"},{"size":850,"mtime":1615400353891,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1r4ncwv",{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"44"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"44"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"44"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"44"},"/home/tinesh_ash/Documents/SIDP/covinfo/src/index.js",[],["91","92"],"/home/tinesh_ash/Documents/SIDP/covinfo/src/App.js",["93"],"import React, { useState, useEffect } from \"react\";\nimport SimpleCard from \"./components/Card\";\nimport db from \"./firebase.config\";\nimport \"./App.css\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport { States } from \"./components/States\";\nimport { Link } from \"react-router-dom\";\nimport Piechart from \"./components/pieChart\";\nimport Alltime from \"./components/Alltime\";\nimport NegeriStat from \"./components/funnelChart\";\nimport Shops from \"./components/Shops\";\nimport Shopping from \"./components/Shoppping\";\nimport { motion } from \"framer-motion\";\n\n\nconst App = ({ setAuth, auth }) => {\n  const [cases, setCases] = useState();\n  const [all, setAll] = useState();\n\n  useEffect(() => {\n    fetchCases();\n  }, []);\n\n  const fetchCases = async () => {\n    db.collection(\"state_cases\")\n      .orderBy(\"date\")\n      .get()\n      .then((querySnapshot) => {\n        const data = querySnapshot.docs.map((doc) => doc.data());\n        const values = data[data.length - 1];\n        setAll([data]);\n        setCases([values]);\n      });\n  };\n\n  return (\n    <div className=\"main__Container\">\n      <div className=\"main__Header\">\n        <h1>CovInfo</h1>\n        <div className=\"main__Account\">\n          <Link to=\"/updateCases\" className=\"links\">\n            Update Cases\n          </Link>\n          <Link to=\"/\" className=\"links\" onClick={setAuth}>\n            Logout\n          </Link>\n          <PersonIcon />\n        </div>\n      </div>\n\n      <div className=\"stats_Container\">\n        <div className=\"stats__Main\">\n          {cases && (\n            <div className=\"stats__Shower\">\n              <SimpleCard\n                title=\"Total Number Of Cases\"\n                cases={cases[0].newCase}\n                colour=\"#ffc658\"\n                date={cases[0].date}\n                total={cases[0].totalCase}\n              />\n              <SimpleCard\n                title=\"Total Deaths\"\n                cases={cases[0].newDeath}\n                colour=\"#FF6666\"\n                date={cases[0].date}\n                total={cases[0].totalDeath}\n              />\n              <SimpleCard\n                title=\"Total Recoveries\"\n                cases={cases[0].newRecovery}\n                colour=\"#7AFF66\"\n                date={cases[0].date}\n                total={cases[0].totalRecovery}\n              />\n            </div>\n          )}\n          <div className=\"piechart__Stats\">\n            {cases && <Piechart cases={cases} />}\n            {cases && <Alltime cases={all} />}\n          </div>\n          {cases && <NegeriStat cases={cases} />}\n\n         <Shops />\n        \n        </div>\n\n        <div className=\"states_Container\">\n          <States />\n\n        </div>\n\n      </div>\n\n\n\n<Shopping/>\n\n     \n\n\n    </div>\n  );\n};\n\nexport default App;\n","/home/tinesh_ash/Documents/SIDP/covinfo/src/firebase.config.js",[],"/home/tinesh_ash/Documents/SIDP/covinfo/src/components/Card.js",[],"/home/tinesh_ash/Documents/SIDP/covinfo/src/components/ProgressProvider.js",[],"/home/tinesh_ash/Documents/SIDP/covinfo/src/components/States.js",[],"/home/tinesh_ash/Documents/SIDP/covinfo/src/components/updateStates.js",["94"],"import React, { useState, useEffect } from \"react\";\nimport firebase from \"firebase\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport \"../App.css\";\nimport { Button } from \"@material-ui/core\";\nimport { Link } from \"react-router-dom\";\nimport { Alert, AlertTitle } from \"@material-ui/lab\";\nimport db from \"../firebase.config\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n      width: \"45ch\",\n      display: \"flex\",\n    },\n  },\n\n  text: {\n    marginBottom: \"1rem\",\n    marginLeft: \"3rem\",\n  },\n  button: {\n    marginLeft: \"4.5rem\",\n  },\n\n  links: {\n    textDecoration: \"none\",\n    color: \"white\",\n  },\n  form: {\n    position: \"absolute\",\n    left: \"46rem\",\n  },\n  alert: {\n    position: \"absolute\",\n    bottom: 12,\n    left: 450,\n  },\n}));\n\nconst UpdateStates = () => {\n  const [selangor, setSelangor] = useState(\"\");\n  const [johor, setJohor] = useState(\"\");\n  const [kedah, setKedah] = useState(\"\");\n  const [kelantan, setKelantan] = useState(\"\");\n  const [melaka, setMelaka] = useState(\"\");\n  const [sembilan, setSembilan] = useState(\"\");\n  const [pahang, setPahang] = useState(\"\");\n  const [penang, setPenang] = useState(\"\");\n  const [perak, setPerak] = useState(\"\");\n  const [perlis, setPerlis] = useState(\"\");\n  const [sabah, setSabah] = useState(\"\");\n  const [sarawak, setSarawak] = useState(\"\");\n  const [terengganu, setTerengganu] = useState(\"\");\n  const [lumpur, setLumpur] = useState(\"\");\n  const [labuan, setLabuan] = useState(\"\");\n  const [putrajaya, setPutrajaya] = useState(\"\");\n  const [deaths, setDeaths] = useState(\"\");\n  const [recoveries, setRecoveries] = useState(\"\");\n  const [success, setSuccess] = useState(false);\n  const [failure, setFailure] = useState(false);\n  const [prev, setPrev] = useState();\n\n  const classes = useStyles();\n\n  const errorMessage = () => {\n    if (failure)\n      return (\n        <Alert severity=\"error\">\n          <AlertTitle>Error</AlertTitle>\n          Error updating — <strong>ctry again!</strong>\n        </Alert>\n      );\n  };\n\n  const successMessage = () => {\n    if (success)\n      return (\n        <Alert severity=\"success\" className={classes.alert}>\n          <AlertTitle>Success</AlertTitle>\n          Cases Updated <strong>check it out!</strong>\n        </Alert>\n      );\n  };\n\n  useEffect(() => {\n    fetchCases();\n  }, []);\n\n  const fetchCases = async () => {\n    db.collection(\"state_cases\")\n      .orderBy(\"date\")\n      .get()\n      .then((querySnapshot) => {\n        const data = querySnapshot.docs.map((doc) => doc.data());\n\n        setPrev(data[data.length - 1]);\n      });\n  };\n\n  const handleSubmit = (e) => {\n    if (\n      selangor === \"\" ||\n      johor === \"\" ||\n      kedah === \"\" ||\n      kelantan === \"\" ||\n      melaka === \"\" ||\n      sembilan === \"\" ||\n      pahang === \"\" ||\n      penang === \"\" ||\n      perak === \"\" ||\n      perlis === \"\" ||\n      sabah === \"\" ||\n      sarawak === \"\" ||\n      terengganu === \"\" ||\n      lumpur === \"\" ||\n      labuan === \"\" ||\n      putrajaya === \"\" ||\n      recoveries === \"\" ||\n      deaths === \"\"\n    ) {\n      return (<UpdateStates />), setFailure(true);\n    }\n    db.collection(\"state_cases\")\n      .add({\n        date: firebase.firestore.FieldValue.serverTimestamp(),\n        negeri: [\n          {\n            name: \"Selangor\",\n            new_case: parseInt(selangor),\n            total_case: parseInt(selangor) + prev.negeri[0].total_case,\n          },\n          {\n            name: \"Johor\",\n            new_case: parseInt(johor),\n            total_case: parseInt(johor) + prev.negeri[1].total_case,\n          },\n          {\n            name: \"Kedah\",\n            new_case: parseInt(kedah),\n            total_case: parseInt(kedah) + prev.negeri[2].total_case,\n          },\n          {\n            name: \"Kelantan\",\n            new_case: parseInt(kelantan),\n            total_case: parseInt(kelantan) + prev.negeri[3].total_case,\n          },\n          {\n            name: \"Melaka\",\n            new_case: parseInt(melaka),\n            total_case: parseInt(melaka) + prev.negeri[4].total_case,\n          },\n          {\n            name: \"Negeri Sembilan\",\n            new_case: parseInt(sembilan),\n            total_case: parseInt(sembilan) + prev.negeri[5].total_case,\n          },\n          {\n            name: \"Pahang\",\n            new_case: parseInt(pahang),\n            total_case: parseInt(pahang) + prev.negeri[6].total_case,\n          },\n          {\n            name: \"Penang\",\n            new_case: parseInt(penang),\n            total_case: parseInt(penang) + prev.negeri[7].total_case,\n          },\n          {\n            name: \"Perak\",\n            new_case: parseInt(perak),\n            total_case: parseInt(perak) + prev.negeri[8].total_case,\n          },\n          {\n            name: \"Perlis\",\n            new_case: parseInt(perlis),\n            total_case: parseInt(perlis) + prev.negeri[9].total_case,\n          },\n          {\n            name: \"Sabah\",\n            new_case: parseInt(sabah),\n            total_case: parseInt(sabah) + prev.negeri[10].total_case,\n          },\n          {\n            name: \"Sarawak\",\n            new_case: parseInt(sarawak),\n            total_case: parseInt(sarawak) + prev.negeri[11].total_case,\n          },\n          {\n            name: \"Terengganu\",\n            new_case: parseInt(terengganu),\n            total_case: parseInt(terengganu) + prev.negeri[12].total_case,\n          },\n          {\n            name: \"Kuala Lumpur\",\n            new_case: parseInt(lumpur),\n            total_case: parseInt(lumpur) + prev.negeri[13].total_case,\n          },\n          {\n            name: \"Labuan\",\n            new_case: parseInt(labuan),\n            total_case: parseInt(labuan) + prev.negeri[14].total_case,\n          },\n          {\n            name: \"Putrajaya\",\n            new_case: parseInt(putrajaya),\n            total_case: parseInt(putrajaya) + prev.negeri[15].total_case,\n          },\n        ],\n        newCase:\n          parseInt(johor) +\n          parseInt(selangor) +\n          parseInt(kedah) +\n          parseInt(kelantan) +\n          parseInt(melaka) +\n          parseInt(sembilan) +\n          parseInt(pahang) +\n          parseInt(penang) +\n          parseInt(perak) +\n          parseInt(perlis) +\n          parseInt(sabah) +\n          parseInt(sarawak) +\n          parseInt(terengganu) +\n          parseInt(lumpur) +\n          parseInt(labuan) +\n          parseInt(putrajaya),\n        newDeath: parseInt(deaths),\n        newRecovery: parseInt(recoveries),\n        totalCase:\n          parseInt(selangor) +\n          prev.negeri[0].total_case +\n          parseInt(johor) +\n          prev.negeri[1].total_case +\n          parseInt(kedah) +\n          prev.negeri[2].total_case +\n          parseInt(kelantan) +\n          prev.negeri[3].total_case +\n          parseInt(melaka) +\n          prev.negeri[4].total_case +\n          parseInt(sembilan) +\n          prev.negeri[5].total_case +\n          parseInt(pahang) +\n          prev.negeri[6].total_case +\n          parseInt(penang) +\n          prev.negeri[7].total_case +\n          parseInt(perak) +\n          prev.negeri[8].total_case +\n          parseInt(perlis) +\n          prev.negeri[9].total_case +\n          parseInt(sabah) +\n          prev.negeri[10].total_case +\n          parseInt(sarawak) +\n          prev.negeri[11].total_case +\n          parseInt(terengganu) +\n          prev.negeri[12].total_case +\n          parseInt(lumpur) +\n          prev.negeri[13].total_case +\n          parseInt(labuan) +\n          prev.negeri[14].total_case +\n          parseInt(putrajaya) +\n          prev.negeri[15].total_case,\n\n        totalRecovery: parseInt(recoveries) + prev.totalRecovery,\n        totalDeath: parseInt(deaths) + prev.totalDeath,\n      })\n      .then(() => {\n        setSuccess(true);\n        setJohor(\"\");\n        setSelangor(\"\");\n      })\n      .catch((error) => {\n        console.log(error);\n        setFailure(true);\n      });\n  };\n\n  return (\n    <div className={classes.form}>\n      <form\n        className={classes.root}\n        noValidate\n        required\n        autoComplete=\"off\"\n        onSubmit={handleSubmit}\n      >\n        <h1>Update States Cases</h1>\n        <TextField\n          required\n          id=\"outlined-basic\"\n          label=\"Selangor\"\n          variant=\"outlined\"\n          className={classes.text}\n          type=\"number\"\n          onChange={(e) => setSelangor(e.target.value)}\n          value={selangor}\n        />\n        <TextField\n          required\n          id=\"outlined-basic\"\n          label=\"Johor\"\n          variant=\"outlined\"\n          className={classes.text}\n          type=\"number\"\n          onChange={(e) => setJohor(e.target.value)}\n          value={johor}\n        />\n        <TextField\n          required\n          id=\"outlined-basic\"\n          label=\"Kedah\"\n          variant=\"outlined\"\n          className={classes.text}\n          type=\"number\"\n          onChange={(e) => setKedah(e.target.value)}\n          value={kedah}\n        />\n        <TextField\n          required\n          id=\"outlined-basic\"\n          label=\"Kelantan\"\n          variant=\"outlined\"\n          className={classes.text}\n          type=\"number\"\n          onChange={(e) => setKelantan(e.target.value)}\n          value={kelantan}\n        />\n        <TextField\n          required\n          id=\"outlined-basic\"\n          label=\"Melaka\"\n          variant=\"outlined\"\n          className={classes.text}\n          type=\"number\"\n          onChange={(e) => setMelaka(e.target.value)}\n          value={melaka}\n        />\n        <TextField\n          required\n          id=\"outlined-basic\"\n          label=\"Negeri Sembilan\"\n          variant=\"outlined\"\n          className={classes.text}\n          type=\"number\"\n          onChange={(e) => setSembilan(e.target.value)}\n          value={sembilan}\n        />\n        <TextField\n          required\n          id=\"outlined-basic\"\n          label=\"Pahang\"\n          variant=\"outlined\"\n          className={classes.text}\n          type=\"number\"\n          onChange={(e) => setPahang(e.target.value)}\n          value={pahang}\n        />\n        <TextField\n          required\n          id=\"outlined-basic\"\n          label=\"Penang\"\n          variant=\"outlined\"\n          className={classes.text}\n          type=\"number\"\n          onChange={(e) => setPenang(e.target.value)}\n          value={penang}\n        />\n        <TextField\n          required\n          id=\"outlined-basic\"\n          label=\"Perak\"\n          variant=\"outlined\"\n          className={classes.text}\n          type=\"number\"\n          onChange={(e) => setPerak(e.target.value)}\n          value={perak}\n        />\n        <TextField\n          required\n          id=\"outlined-basic\"\n          label=\"Perlis\"\n          variant=\"outlined\"\n          className={classes.text}\n          type=\"number\"\n          onChange={(e) => setPerlis(e.target.value)}\n          value={perlis}\n        />\n        <TextField\n          required\n          id=\"outlined-basic\"\n          label=\"Sabah\"\n          variant=\"outlined\"\n          className={classes.text}\n          type=\"number\"\n          onChange={(e) => setSabah(e.target.value)}\n          value={sabah}\n        />\n        <TextField\n          required\n          id=\"outlined-basic\"\n          label=\"Sarawak\"\n          variant=\"outlined\"\n          className={classes.text}\n          type=\"number\"\n          onChange={(e) => setSarawak(e.target.value)}\n          value={sarawak}\n        />\n        <TextField\n          required\n          id=\"outlined-basic\"\n          label=\"Terengganu\"\n          variant=\"outlined\"\n          className={classes.text}\n          type=\"number\"\n          onChange={(e) => setTerengganu(e.target.value)}\n          value={terengganu}\n        />\n        <TextField\n          required\n          id=\"outlined-basic\"\n          label=\"Kuala Lumpur\"\n          variant=\"outlined\"\n          className={classes.text}\n          type=\"number\"\n          onChange={(e) => setLumpur(e.target.value)}\n          value={lumpur}\n        />\n        <TextField\n          required\n          id=\"outlined-basic\"\n          label=\"Labuan\"\n          variant=\"outlined\"\n          className={classes.text}\n          type=\"number\"\n          onChange={(e) => setLabuan(e.target.value)}\n          value={labuan}\n        />\n        <TextField\n          required\n          id=\"outlined-basic\"\n          label=\"Putrajaya\"\n          variant=\"outlined\"\n          className={classes.text}\n          type=\"number\"\n          onChange={(e) => setPutrajaya(e.target.value)}\n          value={putrajaya}\n        />\n        <TextField\n          required\n          id=\"outlined-basic\"\n          label=\"New Death\"\n          variant=\"outlined\"\n          className={classes.text}\n          type=\"number\"\n          onChange={(e) => setDeaths(e.target.value)}\n          value={deaths}\n        />\n        <TextField\n          required\n          id=\"outlined-basic\"\n          label=\"New Recovery\"\n          variant=\"outlined\"\n          className={classes.text}\n          type=\"number\"\n          onChange={(e) => setRecoveries(e.target.value)}\n          value={recoveries}\n        />\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className={classes.button}\n          onClick={handleSubmit}\n        >\n          Update States\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          className={classes.button}\n        >\n          <Link to=\"/dashboard\" className={classes.links}>\n            Back To Dashboard\n          </Link>\n        </Button>\n      </form>\n      {(errorMessage(), successMessage())}\n    </div>\n  );\n};\n\nexport default UpdateStates;\n","/home/tinesh_ash/Documents/SIDP/covinfo/src/components/pieChart.js",[],"/home/tinesh_ash/Documents/SIDP/covinfo/src/components/Legend.js",[],["95","96"],"/home/tinesh_ash/Documents/SIDP/covinfo/src/components/Alltime.js",[],"/home/tinesh_ash/Documents/SIDP/covinfo/src/components/funnelChart.js",[],"/home/tinesh_ash/Documents/SIDP/covinfo/src/components/Login.js",[],"/home/tinesh_ash/Documents/SIDP/covinfo/src/components/Shops.js",[],"/home/tinesh_ash/Documents/SIDP/covinfo/src/components/UserTracker.js",["97","98","99","100","101","102","103","104","105","106","107"],"import React, { useState, useEffect } from \"react\";\nimport {  useParams } from \"react-router-dom\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport db from \"../firebase.config\";\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport \"./Map.css\";\nimport MapShower from \"./Map\";\nimport Restaurant from \"./Restaurant\"\nimport moment from \"moment\"\nimport { CSVLink } from \"react-csv\";\nimport Toggle from \"./Toggle\";\n\n\n\n\n\n\n\nconst UserTracker = () => {\n\n\n\n  const [details, setDetails] = useState([]);\n  const [profile, setProfile] = useState()\n  const [location, setLocation] = useState([])\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  const [proximity, setProximity] = useState([])\n  const [users, setUsers] = useState([])\n  const [shops, setShops] = useState([])\n  const [visited, setVisited] = useState([])\n\n\n  var nowDate = moment().unix()\n  var pastDate = moment().subtract(14, 'days').unix()\n\n\n\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  \n\n  let { id } = useParams();\n  let trimmed = id.trim()\n\n\n\n\n  useEffect(() => {\n \n    return db.collection(\"users\").doc(trimmed).collection(\"check_in\")\n    .where(\"date\", \">\", beginningDateObject)\n    .orderBy(\"date\")\n    .onSnapshot(snapshot => {\n      const detailData = []\n      const seen = new Set()\n      snapshot.forEach(doc => detailData.push({...doc.data()}))\n      const filteredArr = detailData.filter(el => {\n        const duplicate = seen.has(el.shop_id);\n        seen.add(el.shop_id);\n        return !duplicate;\n      });\n    \n      setDetails(detailData)\n      setVisited(filteredArr)\n    })\n\n   \n  },[])\n\n\n\n\n  useEffect(() => {\n \n    fetchProfile()\n\n   \n  },[])\n\n  useEffect(() => {\n \n  return db.collection(\"users\").doc(trimmed).collection(\"location\")\n          .where(\"time\", \">\", beginningDateObject)//remove this for all location\n          .orderBy(\"time\")\n          .onSnapshot(snapshot => {\n            const locationData = []\n            snapshot.forEach(doc => locationData.push({...doc.data()}))\n            setLocation(locationData)\n          })\n\n   \n  },[])\n\n  var beginningDate = Date.now() - 1209600000 ;\nvar beginningDateObject = new Date(beginningDate);\n\n\n\n  useEffect(() => {\n \n    return db.collection(\"users\").doc(trimmed).collection(\"close_contact\")\n            .orderBy(\"date\")\n            .where('date', '>', beginningDateObject)\n\n            .onSnapshot(snapshot => {\n              const proximityData = []\n              const seen = new Set()\n              snapshot.forEach(doc => proximityData.push({...doc.data()}))\n             \n             const filteredArr = proximityData.filter(el => {\n                const duplicate = seen.has(el.user_id);\n                seen.add(el.user_id);\n                return !duplicate;\n              });\n            \n            \n              setProximity(filteredArr)\n      \n            })\n  \n     \n    },[])\n\n\n\n\n\n\n\n\n\n  const fetchProfile = async () => {\n\n  \n    \n   await db.collection(\"users\")\n      .doc(trimmed)\n      .get()\n      .then(function(doc) {\n        if (doc.exists) {\n   \n           setProfile(doc.data())\n        } else {\n            // doc.data() will be undefined in this case\n            console.log(\"No such document!\");\n        }\n    }).catch(function(error) {\n        console.log(\"Error getting document:\", error);\n    });\n  }\n\n\n  useEffect(() => {\n    return db.collection(\"users\").onSnapshot(snapshot => {\n      const usersdata = [];\n      snapshot.forEach(doc => usersdata.push({...doc.data()}))\n      setUsers(usersdata)\n    \n    })\n   }, []);\n\n\n\n\n\n\n\n  const useStyles = makeStyles({\n    root: {\n      width: 375,\n      height: 505,\n      margin: 30,\n    \n  \n\n\n    },\n    title: {\n      fontSize: 14,\n   \n\n    },\n    container : {\n      display : \"flex\",\n      alignItems: \"center\",\n      height: 600,\n      width: \"80%\",\n      justifyContent: \"space-evenly\",\n\n    \n    },\n\n    details: {\n      display:\"flex\",\n      flexDirection:\"column\",\n      alignItems:\"center\",\n   \n    },\n    rootPaper: {\n      width: 505,\n      height: 505,\n\n    },\n    containerPaper: {\n      height: 450,\n    },\n\n    download : {\n      position : \"absolute\",\n      bottom : 585,\n      paddingLeft: \"1rem\"\n    },\n   \n\n  });\n\n  const classes = useStyles();\n\n  const columns = [\n    { id: 'latitude', label: 'Latitude', minWidth: 170 },\n    { id: 'longitude', label: 'Longitude', minWidth: 100 },\n    {\n      id: 'time',\n      label: 'Date & Time',\n      minWidth: 100,\n      format: (value) => new Date(value.seconds * 1000).toLocaleString()\n    }\n  \n  ];\n\n\n  const column = [\n    { id: 'customerName', label: 'Name', minWidth: 170, \n    format: (value) => value.displayName },\n\n        \n    { id: 'icNumber', label: 'IC', minWidth: 170, \n    format: (value) => value.ic },\n    \n    { id: 'contactNumber', label: 'Phone', minWidth: 170, \n    format: (value) => value.phoneNumber },\n\n  \n    {\n      id: 'date',\n      label: 'Date & Time',\n      minWidth: 150,\n  \n    }\n  \n  ];\n\n  const data = []\n\n\n  \n  \n\n\n\n  proximity && proximity.map(p => {\n  \n    data.push({\n     \n      customerName: users.find(user => {\n        if(user.id === p.user_id)  {\n        return user.displayName\n        }\n      }),\n\n      icNumber: users.find(user => {\n        if(user.id === p.user_id)  {\n        return user.displayName\n        }\n      }),\n     \n      contactNumber: users.find(user => {\n        if(user.id === p.user_id)  {\n        return user.displayName\n        }\n      }),\n  \n      date : new Date(p.date.seconds * 1000).toLocaleString()\n      \n    })\n\nreturn data\n\n  })\n\n\n  const headers = [\n    { label: \"Name\", key: \"customerName.displayName\"},\n    { label: \"IC\", key: \"icNumber.ic\"},\n    { label: \"Phone Number\", key: \"contactNumber.phoneNumber\" },\n    { label: \"Date & Time\", key: \"date\"}\n  ];\n\n\n \n\nreturn  (\n \n    <div className=\"container\">\n  \n    <div  className={classes.container}>\n      \n      <Card className={classes.root}>\n        <CardContent className={classes.details}>\n        <Typography\n          className={classes.title}\n          color=\"textSecondary\"\n          gutterBottom\n        >\n          Name : {profile && profile.displayName}\n\n        </Typography>\n        <Typography\n          className={classes.title}\n          color=\"textSecondary\"\n          gutterBottom\n        >\n     \n          IC : {profile && profile.ic}  \n         \n        </Typography>\n        <Typography\n          className={classes.title}\n          color=\"textSecondary\"\n          gutterBottom\n        >\n\n          Phone : {profile && profile.phoneNumber}\n        </Typography>\n\n        {details && details.map(detail => (\n            \n          <Typography\n          className={classes.title}\n          color=\"textSecondary\"\n          gutterBottom\n        >\n            \n      {`Shop Name : ${detail.shop_name} \\u00A0\\u00A0Date : ${new Date(detail.date.seconds *1000).toLocaleString()}`}\n        </Typography>\n        ))}\n        </CardContent>\n        {profile && <Toggle profile={profile}/>}\n      </Card>\n\n      <Paper className={classes.rootPaper}>\n      <TableContainer className={classes.containerPaper}>\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow>\n              {columns.map((column) => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {location.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((l) => {\n              return (\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={l.latitude}>\n                  {columns.map((column) => {\n                    const value = l[column.id]\n                \n                    return (\n                      <TableCell key={column.id} align={column.align}>\n                        {column.format && typeof value === 'object' ? column.format(value):value}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[10, 25, 100]}\n        component=\"div\"\n        count={location.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n      />\n    </Paper>\n\n    <Paper className={classes.rootPaper}>\n      <TableContainer className={classes.containerPaper}>\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow>\n              {column.map((c) => (\n                <TableCell\n                  key={c.id}\n                  align={c.align}\n                  style={{ minWidth: c.minWidth }}\n                >\n                  {c.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {data.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((d) => {\n              return (\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={d.customerName}>\n                  {column.map((c) => {\n                    const value = d[c.id]\n                \n                    return (\n                      <TableCell key={c.id} align={c.align}>\n                        {c.format && typeof value === 'object' ? c.format(value):value}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              );\n            })}\n          </TableBody>\n\n        </Table>\n\n      </TableContainer>\n      \n      <TablePagination\n        rowsPerPageOptions={[10, 25, 100]}\n        component=\"div\"\n        count={location.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n      />\n            <CSVLink data={data} headers={headers} className={classes.download}>\n  Download CSV \n</CSVLink>\n    </Paper>\n    <Restaurant date={beginningDateObject} visited={visited} customers={users} profile={profile}/>\n    </div>\n\n        {location.length > 0 && <MapShower locations={location} profile={profile}/> }\n      \n    \n  </div>\n  )\n};\n\nexport default UserTracker;\n","/home/tinesh_ash/Documents/SIDP/covinfo/src/components/Map.js",["108","109"],"import React, {useEffect, useState} from 'react'\nimport { MapContainer, TileLayer, CircleMarker , Popup} from \"react-leaflet\";\nimport Checkbox from '@material-ui/core/Checkbox';\nimport \"./Map.css\";\nimport { Button } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\n\nimport db from '../firebase.config';\n\n\nconst MapShower = ({locations, profile}) => {\n \n   \n    const val = []\n    const redOptions = { color: \"red\" };\n    const [last, setLast] = useState(false);\n  \n\n\n\n\n \n    const handleChange = () => {\n      setLast(!last)\n    };\n\n \n\n  \n            \n        for (let index = 0; index < locations.length; index++) {\n          \n            const data = []\n            \n\n            data.push.apply(data, [locations[index].latitude, locations[index].longitude])\n         \n\n            val.push(data)\n            \n        }\n    \n     \n        let guid = () => {\n            let s4 = () => {\n                return Math.floor((1 + Math.random()) * 0x10000)\n                    .toString(16)\n                    .substring(1);\n            }\n            //return id of format 'aaaaaaaa'-'aaaa'-'aaaa'-'aaaa'-'aaaaaaaaaaaa'\n            return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n        }\n\n  \n\n      \n    return (\n\n        \n        <div>\n                <div className=\"last__Seen\">\n                        <Checkbox\n                checked={last}\n                onChange={handleChange}\n                inputProps={{ 'aria-label': 'primary checkbox' }}\n            />\n            <h3>Last Seen Location</h3>\n       <Link to = \"/dashboard\" className=\"button__Dashboard\" style={{ textDecoration: 'none' }}>      <Button variant=\"contained\" color=\"primary\" size=\"small\" style={{textDecoration:\"none\"}}>\n            Back To Dashboard\n            </Button></Link>\n\n                </div>\n\n\n            {val && (<MapContainer center={val[0]} zoom={13} scrollWheelZoom={true}>\n      <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n\n        { \n            \n\n            last ?      <CircleMarker center={val[val.length - 1]}                 \n            pathOptions={redOptions}\n            radius={35}\n            className=\"circle red\"\n            key={guid}>\n                 <Popup>{`lat:${val[val.length - 1][0]}\\u00A0 long :${val[val.length - 1][1]}\\u00A0`}</Popup>\n            </CircleMarker>    :   val.map(v => (\n\n                <CircleMarker\n                center={v}\n                pathOptions={redOptions}\n                radius={35}\n                className=\"circle red\"\n                key={guid}\n              >\n\n\n            \n         \n\n                <Popup>{`lat:${v[0]}\\u00A0 long :${v[1]}\\u00A0`}</Popup>\n               ))\n          \n\n               \n\n       \n              \n                \n              </CircleMarker>\n            \n                \n            ))\n\n         \n\n\n        }\n\n    </MapContainer>)}\n\n        </div>\n             )\n}\n\nexport default MapShower\n\n","/home/tinesh_ash/Documents/SIDP/covinfo/src/components/Shoppping.js",["110","111","112"],"import React, { useState , useEffect} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport db from \"../firebase.config\";\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Fade from '@material-ui/core/Fade';\nimport TextField from \"@material-ui/core/TextField\";\nimport { CSVLink } from \"react-csv\";\n\n\n\n\n\n\n\nexport default function Shopping() {\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const open = Boolean(anchorEl);\n  const [shop, setShop] = useState([])\n  const [val , setVal] = useState(\"\")\n  const [address, setAddress] = useState(\"\")\n  const [phone, setPhone] = useState(\"\")\n  const [detail, setDetail] = useState([])\n  const [users, setUsers] = useState([])\n  const [format, setFormat] = useState([])\n  const [name, setName] = useState(\"\");\n  const [fail , setFail] = useState(false)\n\n\n\n\nconst useStyles = makeStyles({\n  root: {\n\n    position: \"absolute\",\n    left: 325,\n    top: 1380,\n \n  },\n  container: {\n    height: 500,\n  },\n  view : {\n      height: \"100vh\"\n  },\n  drop : {\n  \n   margin: \"5px 5px 5px 5px\",\n   display: \"flex\",\n   alignItems: \"center\",\n\n  },\n  input: {\n    width: \"25rem\",\n    marginLeft: \"2rem\"\n    \n   },\n\n\n});\nconst classes = useStyles();\n\n\n  const columns = [\n    { id: 'customer_id', \n    label: 'Customer', \n    minWidth: 170 ,\n    format : (value) => users.map(user => {\n        if(user.id === value) return user.displayName\n    })\n    },\n    { id: 'temperature', label: 'Temperature', minWidth: 100 },\n    {\n      id: 'date',\n      label: 'Date & Time',\n      minWidth: 100,\n      format: (value) => new Date(value.seconds * 1000).toLocaleString()\n    }\n  \n  ];\n  \n  const headers = [\n    { label: \"Customer Name\", key: \"customerName.displayName\"},\n    { label: \"Temperature\", key: \"temperature\" },\n    { label: \"Date & Time\", key: \"date\"}\n  ];\n\n\n  useEffect(() => {\n    return db.collection(\"shops\").onSnapshot(snapshot => {\n      const shopdata = [];\n      snapshot.forEach(doc => shopdata.push({...doc.data()}))\n      setShop(shopdata)\n    \n    })\n   }, []);\n\n   useEffect(() => {\n    return db.collection(\"users\").onSnapshot(snapshot => {\n      const usersdata = [];\n      snapshot.forEach(doc => usersdata.push({...doc.data()}))\n      setUsers(usersdata)\n    \n    })\n   }, []);\n\n\n\n\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = (shopId, shopName, shopPhone, shopAddress) => {\n    \n    setAnchorEl(null);\n    setVal(shopName);\n    setAddress(shopAddress);\n    setPhone(shopPhone);\n\n\ntry {\n  \n  return db.collection(\"shops\").doc(shopId.trim()).collection(\"check_in\")\n  .orderBy(\"date\")\n  .onSnapshot(snapshot => {\n      const detailData = [];\n  \n      snapshot.forEach(doc => detailData.push({...doc.data()}))\n      setDetail(detailData)\n\n      setFormat(detailData)\n  })\n\n} catch (error) {\n  console.log(error)\n}\n\n    \n  };\n\n\n\n  const data = []\n\n\nformat && format.map(f => {\n\n  data.push({\n   \n    customerName: users.find(user => {\n      if(user.id === f.customer_id)  {\n      return user.displayName\n      }\n    }),\n    temperature : f.temperature,\n\n    date : new Date(f.date.seconds * 1000).toLocaleString()\n  })\n\n  return data\n  \n})\n\n\nconst handleSubmit = (e) => {\n  e.preventDefault()\n  const verifier = []\n  shop.some(s => {\n    if(s.shop_name === name) {\n       verifier.push(s) \n       \n    }\n    })\n\n  if(verifier.length > 0){\n    setName(\"\")\n    setFail(false)\n    setVal(verifier[0].shop_name)\n    setPhone(verifier[0].phone)\n    setAddress(verifier[0].address)\n\n    try {\n  \n      return db.collection(\"shops\").doc(verifier[0].id.trim()).collection(\"check_in\")\n      .orderBy(\"date\")\n      .onSnapshot(snapshot => {\n          const detailData = [];\n      \n          snapshot.forEach(doc => detailData.push({...doc.data()}))\n          setDetail(detailData)\n    \n          setFormat(detailData)\n      })\n    \n    } catch (error) {\n      console.log(error)\n    }\n  }else{\n    setFail(true)\n    setDetail([])\n    setName(\"\")\n  }\n}\n\n\n\n\n  return (\n      <div className={classes.view}>\n    <Paper className={classes.root}>\n      <TableContainer className={classes.container}>\n   \n\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow>\n              \n              {columns.map((column) => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {detail.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((d) => {\n              return (\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={d.code}>\n                  {columns.map((column) => {\n                    const value = d[column.id];\n                    return (\n                      <TableCell key={column.id} align={column.align} className={classes.text}>\n                        {column.format ? column.format(value) : value}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[10, 25, 100]}\n        component=\"div\"\n        count={detail.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n      />\n        <div className={classes.drop}>\n        <Button aria-controls=\"fade-menu\" aria-haspopup=\"true\" onClick={handleClick}>\n            Choose Shop\n      </Button>\n      <CSVLink data={data} headers={headers}>\n  Download CSV For :\n</CSVLink>\n      <Menu\n        id=\"fade-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={open}\n        onClose={handleClose}\n        TransitionComponent={Fade}\n      >\n  {\n      shop && shop.map(s => {\n          return       <MenuItem onClick={() => handleClose(s.id,s.shop_name,s.phone,s.address)}>{s.shop_name}</MenuItem>\n      })\n\n  }\n  \n      </Menu>\n<h3>{`\\u00A0${val}\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0Contact Number:\\u00A0${phone}\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0Address:\\u00A0${address}`}</h3>\n\n<form onSubmit={handleSubmit} className={classes.input}>\n            \n     \n            <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"name\"\n            label=\"Shop Name\"\n            name=\"name\"\n            autoComplete=\"name\"\n            autoFocus\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n            error = {fail}\n            onSubmit={handleSubmit}\n          />\n</form>\n\n        </div>\n    </Paper>\n    \n \n    </div>\n  );\n}","/home/tinesh_ash/Documents/SIDP/covinfo/src/components/Restaurant.js",["113","114","115","116","117"],"import React, { useState , useEffect} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport db from \"../firebase.config\";\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Fade from '@material-ui/core/Fade';\nimport { CSVLink } from \"react-csv\";\n\n\n\n\n\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"20%\",\n    position: \"absolute\",\n    right: 40,\n    top: 50,\n \n  },\n  container: {\n    height: 405,\n  },\n  view : {\n      height: \"100vh\"\n  },\n  drop : {\n  \n   margin: \"5px 5px 5px 5px\",\n   display: \"flex\",\n   alignItems: \"center\"\n  }\n});\n\n const Restaurant = ({date, visited, customers , profile}) => {\n\n  \n\n  const classes = useStyles();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const open = Boolean(anchorEl);\n  const [shop, setShop] = useState([])\n  const [val , setVal] = useState(\"\")\n  const [detail, setDetail] = useState([])\n  const [users, setUsers] = useState([])\n  const [format, setFormat] = useState([])\n\n\n\n\n  const columns = [\n    { id: 'customerName', label: 'Name', minWidth: 170, \n    format: (value) => value.displayName },\n\n        \n    { id: 'icNumber', label: 'IC', minWidth: 170, \n    format: (value) => value.ic },\n    \n    { id: 'contactNumber', label: 'Phone', minWidth: 170, \n    format: (value) => value.phoneNumber },\n\n  \n    {\n      id: 'date',\n      label: 'Date & Time',\n      minWidth: 150,\n      format: (value) => new Date(value.seconds * 1000).toLocaleString()\n    }\n  \n  ];\n  \n  const headers = [\n    { label: \"Name\", key: \"customerName.displayName\"},\n    { label: \"IC\", key: \"icNumber.ic\"},\n    { label: \"Phone Number\", key: \"contactNumber.phoneNumber\" },\n    { label: \"Date & Time\", key: \"date\"}\n  ];\n\n\n\n  useEffect(() => {\n    return db.collection(\"shops\").onSnapshot(snapshot => {\n      const shopdata = [];\n      snapshot.forEach(doc => shopdata.push({...doc.data()}))\n      setShop(shopdata)\n    \n    })\n   }, []);\n\n   useEffect(() => {\n    return db.collection(\"users\").onSnapshot(snapshot => {\n      const usersdata = [];\n      snapshot.forEach(doc => usersdata.push({...doc.data()}))\n      setUsers(usersdata)\n    \n    })\n   }, []);\n\n\n\n///////////////////////////////////////////////////////////////\n\n\n\n\n\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = (shopId, shopName) => {\n    \n    setAnchorEl(null);\n    setVal(shopName)\n\ntry {\n\n  return db.collection(\"shops\").doc(shopId.trim()).collection(\"check_in\")\n  .where(\"date\", \">\" , date)\n  .orderBy(\"date\")\n  .onSnapshot(snapshot => {\n      const detailData = [];\n      const seen = new Set()\n      snapshot.forEach(doc => detailData.push({...doc.data()}))\n\n                   \n   const filteredArr = detailData.filter(el => {\n    const duplicate = seen.has(el.customer_id);\n    seen.add(el.customer_id);\n    return !duplicate;\n  });\n      setDetail(filteredArr)\n\n      setFormat(filteredArr)\n\n    \n  })\n  \n} catch (error) {\n\n  console.log(error)\n  \n}\n\n\n\n    \n  };\n\n\n\n  const data = []\n\n\nformat && format.map(f => {\n\n  data.push({\n   \n    customerName: users.find(user => {\n      if(user.id === f.customer_id)  {\n      return user.displayName\n      }\n    }),\n\n    icNumber: users.find(user => {\n      if(user.id === f.customer_id)  {\n      return user.displayName\n      }\n    }),\n   \n    contactNumber: users.find(user => {\n      if(user.id === f.customer_id)  {\n      return user.displayName\n      }\n    }),\n\n    date : new Date(f.date.seconds * 1000).toLocaleString()\n\n    \n  })\n\n  return data\n  \n})\n\n var filteredData = data && data.filter(function(d) {\n  return d.icNumber.ic !== profile.ic\n})\n\n\n\n\n\n\n\n  return (\n      <div className={classes.view}>\n    <Paper className={classes.root}>\n      <TableContainer className={classes.container}>\n   \n\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow>\n              \n              {columns.map((column) => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {filteredData && filteredData.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((d) => {\n              return (\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={d.code}>\n                  {columns.map((column) => {\n                    const value = d[column.id];\n                    return (\n                      <TableCell key={column.id} align={column.align}>\n                        {column.format && typeof value === 'object' ? column.format(value):value}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[10, 25, 100]}\n        component=\"div\"\n        count={data.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n      />\n        <div className={classes.drop}>\n        <Button aria-controls=\"fade-menu\" aria-haspopup=\"true\" onClick={handleClick}>\n            Choose Shop\n      </Button>\n      <CSVLink data={filteredData} headers={headers}>\n  Download CSV For :\n</CSVLink>\n\n      <Menu\n        id=\"fade-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={open}\n        onClose={handleClose}\n        TransitionComponent={Fade}\n      >\n  {\n      visited && visited.map(v => {\n          return       <MenuItem onClick={() => handleClose(v.shop_id,v.shop_name)}>{v.shop_name}</MenuItem>\n      })\n  }\n  \n      </Menu>\n<h3>{`\\u00A0${val}`}</h3>\n\n        </div>\n    </Paper>\n\n    </div>\n  );\n}\n\n\nexport default Restaurant","/home/tinesh_ash/Documents/SIDP/covinfo/src/components/Stats.js",[],"/home/tinesh_ash/Documents/SIDP/covinfo/src/components/Code.js",[],"/home/tinesh_ash/Documents/SIDP/covinfo/src/components/Toggle.js",["118"],"import React, {useEffect, useState} from 'react'\nimport Switch from '@material-ui/core/Switch';\nimport db from '../firebase.config';\nimport \"./Toggle.css\"\n\nconst Toggle = ({profile}) => {\n\n    const {covid} = profile\n\n    const [positive, setPositive] = useState(covid)\n\n    const handleCovid =  ()  => {\n       \n        setPositive(p => !p)\n\n\n\n    }\n\n    useEffect(() => {\n                \n        try {\n            db.collection(\"users\").doc(profile.id.trim()).update({\n                covid : positive\n            })\n        } catch (error) {\n            console.log(error)\n        }\n    }, [positive])\n    return (\n        <div className=\"slider\">\n            <Switch    \n        checked={positive}\n        onChange={() => handleCovid()}\n        inputProps={{ 'aria-label': 'secondary checkbox' }}/>\n        </div>\n    )\n}\n\nexport default Toggle\n",{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","severity":1,"message":"124","line":13,"column":10,"nodeType":"125","messageId":"126","endLine":13,"endColumn":16},{"ruleId":"127","severity":1,"message":"128","line":124,"column":32,"nodeType":"129","messageId":"130","endLine":124,"endColumn":33},{"ruleId":"119","replacedBy":"131"},{"ruleId":"121","replacedBy":"132"},{"ruleId":"123","severity":1,"message":"133","line":40,"column":10,"nodeType":"125","messageId":"126","endLine":40,"endColumn":15},{"ruleId":"123","severity":1,"message":"134","line":40,"column":17,"nodeType":"125","messageId":"126","endLine":40,"endColumn":25},{"ruleId":"123","severity":1,"message":"135","line":44,"column":7,"nodeType":"125","messageId":"126","endLine":44,"endColumn":14},{"ruleId":"123","severity":1,"message":"136","line":45,"column":7,"nodeType":"125","messageId":"126","endLine":45,"endColumn":15},{"ruleId":"137","severity":1,"message":"138","line":87,"column":5,"nodeType":"139","endLine":87,"endColumn":7,"suggestions":"140"},{"ruleId":"137","severity":1,"message":"141","line":97,"column":5,"nodeType":"139","endLine":97,"endColumn":7,"suggestions":"142"},{"ruleId":"137","severity":1,"message":"138","line":111,"column":5,"nodeType":"139","endLine":111,"endColumn":7,"suggestions":"143"},{"ruleId":"137","severity":1,"message":"138","line":141,"column":7,"nodeType":"139","endLine":141,"endColumn":9,"suggestions":"144"},{"ruleId":"145","severity":1,"message":"146","line":284,"column":37,"nodeType":"147","messageId":"148","endLine":284,"endColumn":39},{"ruleId":"145","severity":1,"message":"146","line":290,"column":33,"nodeType":"147","messageId":"148","endLine":290,"endColumn":35},{"ruleId":"145","severity":1,"message":"146","line":296,"column":38,"nodeType":"147","messageId":"148","endLine":296,"endColumn":40},{"ruleId":"123","severity":1,"message":"149","line":1,"column":16,"nodeType":"125","messageId":"126","endLine":1,"endColumn":25},{"ruleId":"123","severity":1,"message":"150","line":8,"column":8,"nodeType":"125","messageId":"126","endLine":8,"endColumn":10},{"ruleId":"145","severity":1,"message":"151","line":79,"column":40,"nodeType":"147","messageId":"148","endLine":79,"endColumn":42},{"ruleId":"145","severity":1,"message":"146","line":172,"column":35,"nodeType":"147","messageId":"148","endLine":172,"endColumn":37},{"ruleId":"145","severity":1,"message":"152","line":190,"column":15,"nodeType":"147","messageId":"153","endLine":190,"endColumn":17},{"ruleId":"123","severity":1,"message":"154","line":54,"column":10,"nodeType":"125","messageId":"126","endLine":54,"endColumn":14},{"ruleId":"123","severity":1,"message":"155","line":56,"column":10,"nodeType":"125","messageId":"126","endLine":56,"endColumn":16},{"ruleId":"145","severity":1,"message":"146","line":181,"column":35,"nodeType":"147","messageId":"148","endLine":181,"endColumn":37},{"ruleId":"145","severity":1,"message":"146","line":187,"column":31,"nodeType":"147","messageId":"148","endLine":187,"endColumn":33},{"ruleId":"145","severity":1,"message":"146","line":193,"column":36,"nodeType":"147","messageId":"148","endLine":193,"endColumn":38},{"ruleId":"137","severity":1,"message":"156","line":29,"column":8,"nodeType":"139","endLine":29,"endColumn":18,"suggestions":"157"},"no-native-reassign",["158"],"no-negated-in-lhs",["159"],"no-unused-vars","'motion' is defined but never used.","Identifier","unusedVar","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression",["158"],["159"],"'shops' is assigned a value but never used.","'setShops' is assigned a value but never used.","'nowDate' is assigned a value but never used.","'pastDate' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'beginningDateObject' and 'trimmed'. Either include them or remove the dependency array.","ArrayExpression",["160"],"React Hook useEffect has a missing dependency: 'fetchProfile'. Either include it or remove the dependency array.",["161"],["162"],["163"],"array-callback-return","Array.prototype.find() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'useEffect' is defined but never used.","'db' is defined but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","Array.prototype.some() expects a return value from arrow function.","expectedInside","'shop' is assigned a value but never used.","'detail' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'profile.id'. Either include it or remove the dependency array.",["164"],"no-global-assign","no-unsafe-negation",{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"165","fix":"169"},{"desc":"165","fix":"170"},{"desc":"171","fix":"172"},"Update the dependencies array to be: [beginningDateObject, trimmed]",{"range":"173","text":"174"},"Update the dependencies array to be: [fetchProfile]",{"range":"175","text":"176"},{"range":"177","text":"174"},{"range":"178","text":"174"},"Update the dependencies array to be: [positive, profile.id]",{"range":"179","text":"180"},[2311,2313],"[beginningDateObject, trimmed]",[2369,2371],"[fetchProfile]",[2776,2778],[3578,3580],[594,604],"[positive, profile.id]"]